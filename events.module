<?php

/**
 * @file
 * Enables keeping an easily and regularly updated web page or a events.
 */

/**
 * Implementation of hook_node_info().
 */
function events_node_info() {
  return array(
    'events' => array(
      'name' => t('Events entry'),
      'module' => 'events',
      'description' => t('A <em>events entry</em> is a single post to an online journal, or <em>events</em>.'),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function events_perm() {
  return array('create events entries', 'delete own events entries', 'delete any events entry', 'edit own events entries', 'edit any events entry');
}

/**
 * Implementation of hook_access().
 */
function events_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      // Anonymous users cannot post even if they have the permission. 
      return user_access('create events entries', $account) && $account->uid ? TRUE : NULL;
    case 'update':
      return user_access('edit any events entry', $account) || (user_access('edit own events entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
    case 'delete':
      return user_access('delete any events entry', $account) || (user_access('delete own events entries', $account) && ($node->uid == $account->uid)) ? TRUE : NULL;
  }
}

/**
 * Implementation of hook_user().
 */
function events_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('create events entries', $user)) {
    $user->content['summary']['events'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Events'),
      // l() escapes the attributes, so we should not escape !username here.
      '#value' => l(t('View recent events entries'), "events/$user->uid", array('attributes' => array('title' => t("Read !username's latest events entries.", array('!username' => $user->name))))),
      '#attributes' => array('class' => 'events'),
    );
  }
}

/**
 * Implementation of hook_help().
 */
function events_help($path, $arg) {
  switch ($path) {
    case 'admin/help#events':
      $output = '<p>'. t('The events module allows registered users to maintain an online journal, or <em>events</em>. Events are made up of individual <em>events entries</em>, and the events entries are most often displayed in descending order by creation time.') .'</p>';
      $output .= '<p>'. t('There is an (optional) <em>Events</em> menu item added to the Navigation menu, which displays all Events available on your site, and a <em>My events</em> item displaying the current user\'s events entries. The <em>Events entry</em> menu item under <em>Create content</em> allows new events entries to be created.') .'</p>';
      $output .= '<p>'. t('Each events entry is displayed with an automatic link to other Events created by the same user. By default, events entries have comments enabled and are automatically promoted to the site front page. The events module also creates a <em>Recent events posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('When using the aggregator module an automatic <em>events it</em> icon is displayed next to the items in a feed\'s <em>latest items</em> block. Clicking this icon populates a <em>events entry</em> with a title (the title of the feed item) and body (a link to the source item on its original site and illustrative content suitable for use in a block quote). Events authors can use this feature to easily comment on items of interest that appear in aggregator feeds from other sites. To use this feature, be sure to <a href="@modules">enable</a> the aggregator module, <a href="@feeds">add and configure</a> a feed from another site, and <a href="@blocks">position</a> the feed\'s <em>latest items</em> block.', array('@modules' => url('admin/build/modules'), '@feeds' => url('admin/content/aggregator'), '@blocks' => url('admin/build/block'))) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@events">Events module</a>.', array('@events' => 'http://drupal.org/handbook/modules/events/')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_form().
 */
function events_form(&$node) {
  global $nid;
  $iid = isset($_GET['iid']) ? (int)$_GET['iid'] : 0;
  $type = node_get_types('type', $node);


  if (empty($node->body)) {
    // If the user clicked a "events it" link, we load the data from the
    // database and quote it in the events.
    if ($nid && $events = node_load($nid)) {
      $node->body = '<em>'. $events->body .'</em> ['. l($events->name, "node/$nid") .']';
    }

    if ($iid && $item = db_fetch_object(db_query('SELECT i.*, f.title as ftitle, f.link as flink FROM {aggregator_item} i, {aggregator_feed} f WHERE i.iid = %d AND i.fid = f.fid', $iid))) {
      $node->title = $item->title;
      // Note: $item->description has been validated on aggregation.
      $node->body = '<a href="'. check_url($item->link) .'">'. check_plain($item->title) .'</a> - <em>'. $item->description .'</em> [<a href="'. check_url($item->flink) .'">'. check_plain($item->ftitle) ."</a>]\n";
    }

  }

  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => !empty($node->title) ? $node->title : NULL, '#weight' => -5);
  $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  return $form;
}

/**
 * Implementation of hook_view().
 */
function events_view($node, $teaser = FALSE, $page = FALSE) {
  if ($page) {
    // Breadcrumb navigation. l() escapes the title, so we should not escape !name. 
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('News and Events'), 'events'), l(t("events", array('!name' => $node->name)), 'events/'. $node->uid))); /* remove user name's events */
  }
  return node_prepare($node, $teaser);
}

/**
 * Implementation of hook_link().
 */
function events_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();

	/* link removed */

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function events_menu() {
  $items['events'] = array(
    'title' => 'News and Events',
    'page callback' => 'events_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'events.pages.inc',
  );
  $items['events/%user_uid_optional'] = array(
    'title' => 'My events',
    'page callback' => 'events_page_user',
    'page arguments' => array(1),
    'access callback' => 'events_page_user_access',
    'access arguments' => array(1),
    'file' => 'events.pages.inc',
  );
  $items['events/%user/feed'] = array(
    'title' => 'News and Events',
    'page callback' => 'events_feed_user',
    'page arguments' => array(1),
    'access callback' => 'events_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'events.pages.inc',
  );
  $items['events/feed'] = array(
    'title' => 'News and Events',
    'page callback' => 'events_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'events.pages.inc',
  );

  return $items;
}

/**
 * Access callback for user events pages.
 */
function events_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a events to 'exist' the user must either be able to
  // create new events entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create events entries', $account) || _events_post_exists($account));
}

/**
 * Helper function to determine if a user has events posts already.
 */
function _events_post_exists($account) {
  return (bool)db_result(db_query_range(db_rewrite_sql("SELECT 1 FROM {node} n WHERE n.type = 'events' AND n.uid = %d AND n.status = 1"), $account->uid, 0, 1));
}

/**
 * Implementation of hook_block().
 *
 * Displays the most recent 10 events titles.
 * HACK: DISPLAY ONLY ITEMS PROMOTED TO FRONT PAGE
 */
function events_block($op = 'list', $delta = 0) {
  global $user;
  if ($op == 'list') {
    $block[0]['info'] = t('Recent events posts');
    return $block;
  }
  else if ($op == 'view') {
    if (user_access('access content')) {
      $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.created FROM {node} n WHERE n.type = 'events' AND n.status = 1 AND n.promote = 1 ORDER BY n.created DESC"), 0, 10);
      if ($node_title_list = node_title_list($result)) {
        $block['content'] = $node_title_list;
        $block['content'] .= theme('more_link', url('events'), t('Read the latest events entries.'));
        $block['subject'] = t('Recent events posts');
        return $block;
      }
    }
  }
}

